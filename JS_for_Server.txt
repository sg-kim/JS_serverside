◎ NPM(Nodejs Package Manager)

○ 설치, 설치된 package 확인

$>npm install ${package name} -g or npm install ${package name}

$>npm ls -g or npm ls

예 1) npm install uglify-js -g
모든 node.js 프로젝트들이 해당 package를 사용할 수 있도록 설치
※ uglify는 공백문자를 제거하여 min.js를 만들어 준다.

예 2) npm install underscore
특정 프로젝트 디렉토리 내에 package를 설치
※ underscore는 array를 handling하는 편리한 메소드들을 제공한다.

※ --save option: NPM들 간에는 의존성(dependancy)이 존재한다. '--save' option은 pakage.json 파일을 참고하여(package.json의 'dependencies' section을 참고) 새로 설치하는 모듈이 필요로하는 모듈들을 함께 설치해준다.

○ 내 project를 (npm이 관리하는) package로 만들기

$> cd ${project directory}

$> npm init

entry point, version 등은 잘 모르겠으면 공란(= default)로 남겨놓는다.

package.json파일이 생성되고 해당 파일 안에 대 project가 의존하고 있는 모듈들의 의존성(dependancy)이 기술된다.

★ parent project를 생성하면 npm init을 통해서 npm package로 관리하는게 좋다. 왜냐하면 package.json파일을 통해 모듈들과의 의존성이 명시적으로 관리되기 때문이다.


◎ Callback 함수

함수의 인자(argument)로 전달하는 (다른) 함수를 callback함수라고 한다. Callback함수는 다른 함수로 부터 자동적으로 호출된다. 함수의 기능을 확장하는 용도로 주로 사용된다.

예)
function b(v1, v2){return (v2 - v1);}	//	callback function
a.sort(b);	//	function as argument = callback function


◎ 동기와 비동기

동기: 내가 다 직접한다.
비동기: 남(모듈)에게 일을 맡기고 다 한것으로 한다.

예) readFile - 비동기, default. readFileSync - 동기

//	Synchronous method
console.log(1);
var data = fs.readFileSync('7_data.txt', {encoding:'utf8'});
console.log(data);

//	Async method
//	readFile calls callback function when the file read is done.
console.log(2);
fs.readFile('7_data.txt', {encoding:'utf8'}, function(err, data){console.log(3); console.log(data);});
console.log(4);

※ 비동기 작업이 맞지 않을 때는 동기방법을 사용해야 한다.
※ node.js는 single thread application이다. 동기 방식을 사용하면 실행 시간이 계속 누적되기 때문에 처리가 늦어진다. 따라서 비동기 방식과 callback method를 활용하여 프로그램의 실행 속도를 높일 수 있다.

◎ JS Express

Express는 node.js위에서 동작하는 웹 프레임웍이다. Express는 node.js 서버 개발에 있어 순수히 node.js만을 가지고 만들때와 비교하여 많은 부분을 단순화 해준다.

$> npm install express

○ 동적 파일 vs. 정적 파일

동적 파일: programming 언어 등이 들어가 있는 파일. 해석에 따라 동적으로 동작한다.

정적 파일: 데이터, 기술(description)으로 내용이 구성된 파일. 의미가 고정된다.


◎ Template engine

동적 파일 핸들링과 정적 파일 핸들링의 장점을 결합한 파일 취급 방식

정적 파일의 경우 static point를 지정해 주면 node.js가 정적 파일들을 자동으로 load해 주기 때문에 파일의 내용이 변경되어도 node.js server를 재시작할 필요가 없다는 장점이 있다. 하지만 동적으로 내용을 생성하는 코드가 담겨진 위치(주소, path)로 접근했을 때 이를 처리하지 못하는 단점이 있다.

동적 파일 처리를 위해서는 main entry point 파일(routing logic이 들어있는 파일)에 원하는 동적 기능을 제공하는 코드를 넣어주어야 하는데 이렇게 되면 가독성이 낮아지고 무엇보다 컨텐츠와 컨트롤이 섞여서 관리가 어려워지는 단점이 생긴다.

위와 같은 정적 파일 처리, 그리고 동적 파일 처리의 장점을 취하려는 파일 처리 방식이 template method이다.

○ Template engine - Jade

$> npm install jade --save


◎ query string(= GET method)를 이용한 요청의 처리

express call back function의 req객체의 query를 사용한다.

예) req.query.id


◎ Semantic web
: query string 없이 URL로 특정 요청을 보내는 것

예)
Non-semanctic URL: http://example.com/index.php?page=name
Semantic URL: http://example.com/name

express call back fucntion에 전달되는 req 객체의 params를 이용한다.

예) req.params.id


◎ GET 방식과 POST 방식을 통한 정보전달

① body-parser middleware를 설치한다. 사용자가 전송한 데이터는 먼저 body-parser를 통과한 후(처리된 후) app에 전달되기 때문에 middle ware라고 한다.

$> npm install body-parser (-g) --save

② body parser를 include시킨다.

예) var bodyParser = require('body-parser');

③ app.post() method를 사용해서 POST 방식으로 전달된 data를 받는다.

예)
app.post('/form_receiver', function(req, res){
	var title = req.body.title;
	var description = req.body.description;
	res.send(title + ', ' + description);
});


◎ watcher module - supervisor

파일에 변화가 있으면 해당 파일로 부터 fork된 precess를 변경된 파일의 내용으로 다시 실행시켜준다.

$> npm install supervisor (-g)


◎ 중간 정리 예제: 사용자 정보를 저장하고 (요청 시) 꺼내서 제공하는 서버 구현

※ 이번 topic에서는 정보를 database에 저장하지 않고, file에 저장한다.

var fs = require('fs');

○ file write

fs.writeFile('file_name', format, callback function);

callback function은 보통 error 처리와 file write 이후 작업을 처리한다.

예)
fs.writeFile('./data/'+title, description, 'utf8', function(err){
	if(err){
		console.log(err);
		res.status(500).send('Internal Server Error');
	}
	res.redirect('/topic/'+title);
});

○ file read

fs.readFile('file_name', format, callback function);

예)
fs.readFile('data/'+id, 'utf8', function(err, data){
	if(err){
		console.log(err);
		res.status(500).send('Internal Server Error');
	}
	res.render('view', {topics:files, title:id, description:data});
});

○ directory read

fs.readdir('directory_name', callback function);

예)
fs.readdir('data', function(err, files){
	if(err){
		console.log(err);
		res.status(500).send('Internal Server Error');
	}
	res.render('new', {topics:files});
});


◎ Database

Relational DB(RDB)

NoSQL(Not Only SQL) DB

○ Orient DB - a kind of NoSQL

① www.orientdb.com에 접속해서 community edition을 다운로드 받는다.

② 압축을 풀고 적당한 위치에 옮겨놓는다. 예) c:

③ window의 경우: server.bat를 실행시킨다

④ ^C로 프로세스를 종료시킨 후에는 shutdown.bat를 실행시켜서 자원을 반납한다.

OrientDB를 실행시킨 후 관리자에 접속이 필요한 경우 http connection(예, 0.0.0.0:2480)에 접속해서 관리자 화면으로 들어간다.

○ OrientDB의 database 설정

Table을 만든다 = DB의 구조를 정의한다.
cf.) 구조를 완전히 정의해서 예외를 허용하지 않는다 = schemaful

① class의 생성

관계형 DB의 table = Orient DB에서의 class

예) schema → new (generic) → class의 이름을 'topic' 등으로 설정 후 'save'

② class의 property(RDB에서 table의 column) 설정

관리자 화면에서 class name 선택 → '+ new property' 선택하여 property 추가

예) title, description field

③ 관리자 화면에서 data의 추가

schema화면에서 topic 선택 → 화면 1시 방향의 'New record'선택 → 내용을 입력하고 'save'

특정 행에만 field를 추가 하고 싶은 경우 '+ ADD FIELD'버튼을 이용하여 추가한다.

④ 관리자 화면에서 data보기

Browse → SQL command 입력

예) SELECT * FROM topic;

이 후 화면 아래에 data가 나타난다.

⑤ 관리자 화면의 'Graph' 메뉴를 이용하여 관계성을 도식으로 확인해 볼 수 있다.

○ node.js와 javascript를 이용하여 orientDB 컨트롤

① orientjs module을 설치

$> npm install orientjs --save

② nodejs 파일 안에서 db를 다룰 때는 nodejs javascript 문법을 따른다.

예)

var orientDB = require('orientjs');

var server = orientDB({
	host: 'localhost',	//	DB의 위치를 알려준다.
	port: 2424,
	username: 'root',
	password: 'your password'
});

var db = server.use('db name');

③ SELECT(Read?)

orient DB는 SQL 커맨드 입력을 받을 수 있다.

예)

var sql = 'SELECT * FROM topic WHERE @rid=:rid';
var param = {
	params:{	//	이 JSON parameter 'params'는 약속이다.
		rid:'#22:0'
	}
};
db.query(sql, param).then(function(results){	//	query의 두 번째 인자로 JSON data를 전달한다.
	console.log(results);
});

④ INSERT

예)

sql = 'INSERT INTO topic (title, description) VALUES(:title, :desc)';

var param = {
	params:{
		title:'Express',
		desc:'Express is ...'
	}
};

db.query(sql, param).then(function(results){
	console.log(results);
});

⑤ UPDATE

예)

sql = 'UPDATE topic SET title=:title WHERE @rid=:rid';

var param = {
	params:{
		title:'Expressjs',
		rid:'#21:1'
	}
};

db.query(sql, param).then(function(results){
	console.log(results);
});

⑥ DELETE

예)

sql = 'DELETE FROM topic WHERE @rid=:rid';

var param = {
	params:{
		rid:'#21:1'
	}
}

db.query(sql, param).then(function(results){
	console.log(results);
});


◎ MySQL 이용하기

OS 유형에 맞게 MySQL을 설치하고 설치 위치 혹은 bin 파일의 위치로 이동한다.

① DB Server에 접속하기

$> mysql -u root -p
이 후 password 입력 커맨드 라인이 나타나면 password를 입력한다.

② DB 조회 및 생성

mysql> show databases;

mysql> create database alpha character set utf8 collate utf8_general_ci;

③ Table의 조회 및 생성

mysql> use alpha;

mysql> show tables;

mysql> CREATE TABLE `topic` (`id` int(11) NOT NULL AUTO_INCREMENT, `title` varchar(100) NOT NULL, `description` text NOT NULL, `author` varchar(30) NOT NULL, PRIMARY KEY (id)) ENGINE=InnoDB DEFAULT CHARSET=utf8;

mysql> describe topic;

④ record를 (입력)추가한다.

mysql> insert into topic (title, description, author) VALUES('Javascript', 'Computer language for web.', 'quanto');

mysql> insert into topic (title, description, author) VALUES('Express', 'Nodejs web server framework.', 'quanto');

mysql> insert into topic (title, description, author) VALUES('NPM', 'Package Manager.', 'quanto');

mysql> select * from topic where id=2;

⑤ data의 수정

mysql> update topic SET title='npm', description='Nodejs package manager' where id=3;

mysql> select * from topic where id=3;

⑥ data의 삭제

mysql> delete from topic where id=3;

mysql> select * from topic;


○ Javascript(server side)를 이용하여 MySQL control

node-mysql module이 필요하다.

$> npm install --save node-mysql

var mysql = require('mysql');
var conn = mysql.createConnection({
	host: 'localhost',
	user: 'root',
	password: 'your password',
	database: 'your DB'
});

conn.connect();	//	query를 위해 DB를 연결

conn.end();	//	DB query를 마치고 난 후 연결을 해제


① Read

var sql = 'SELECT * FROM topic WHERE id=?';	//	변수를 '?'로 표시한다.

var params = [id];	변수(?)를 자리에 맞게 배열로 만든다.

conn.query(sql, params, function(err, row, field){	//	query, 변수, callback
	if(err){
		console.log(err);
		res.status(500).send('Internal Server Error');
	}
	else{
		res.render('view', {topics:rows, topic:row[0]});
	}
});


② Create

var sql = 'INSERT INTO topic (title, description, author) VALUES(?, ?, ?)';

var params = [title, description, author];	//	변수 배열

conn.query(sql, params, function(err, row, field){	//	쿼리, 변수, callback
	if(err){
		console.log(err);
		res.status(500).send('Internal Server Error');
	}
	else{
		var id = row['insertId'];
		res.redirect('/topic/' + id);
	}
});

③ Update

var sql = 'UPDATE topic SET title=?, description=?, author=? WHERE id=?';

var params = [title, description, author, id];

conn.query(sql, params, function(err, row, field){
	if(err){
		console.log(err);
		res.status(500).send('Internal Server Error');
	}
	else{
		res.redirect('/topic/' + id);
	}
});

④ Delete

var sql = 'DELETE FROM topic WHERE id=?';

params = [id];

conn.query(sql, params, function(err, rows, fields){
	if(err){
		console.log(err);
		res.status(500).send('Internal Server Error');
	}
	else{
		res.redirect('/topic');
	}
});

★ MySQL 8.0 version으로 넘어오면서 인증 방법이 SHA256_PASSWORD → SHA2_PASSWORD로 강화되었다. 하지만 아직(2018.11월 기준) node.js Mysql library가 이 변화에 대응하지 못하고 있다. 접속시에 'ER_NOT_SUPPORTED_AUTH_MODE: Client does not support authentication protocol requested by server'와 같은 error 메시지가 뜬다면 mysql의 인증 방법을 다시 설정해 줄 필요가 있다. 아래와 같이 node.js를 통해 접속하고자 하는 사용자의 인증방법을 기존(native)방법으로 설정하면 node.js를 통해 8.0 version의 MySQL과 연동할 수 있다.

mysql> ALTER USER 'root'@'localhost' IDENTIFIED WITH 'mysql_native_password' BY 'your root password';


◎ HTTP - Hyper Text Transfer Protocol

Stateless: 매 접속은 이전 접속의 상태(데이터)를 알 수 없다.

○ Cookie

HTTP의 stateless 특성을 해결하기 위해서 Netscape에서 만든 서버에 저장되는 상태정보

expressjs.com → API문서 → Request → req.cookies 참조: cookie-parser middle ware를 설치하도록 안내하고 있다.

$> npm install cookie-parser --save

★ DB가 client가 data를 server에 CRUD(Create, Read, Update, Delete)하는 것이라면, Cookie는 반대로 server가 client PC에 data를 CRUD하는 것이다.

var cookieParser = require('cookie-parser');

var app = express();

app.use(cookieParser());

① Create

if(req.cookies.cart){
	var cart = req.cookies.cart;	//	cart라는 cookie를 가져온다
}
else{
	var cart = {};	//	empty javascript object
}

res.cookie('cart', cart);	//	cart라는 cookie를 만든다

② Read

var cart = req.cookies.cart;

if(!cart){
	res.send('Your cart is empty!');
}
else{
	var output = '';
	for(var key in cart){
		output = output + `<li>${cart[key]}</li>`;	//	read key:value pair in the card object
	}
}
res.send(`<ul>${output}</ul>`);

③ Update

var id = req.params.id;

if(req.cookies.cart){
	var cart = req.cookies.cart;	//	retrieve cookie cart
}
else{
	var cart = {};
}
if(!cart[id]){
	cart[id] = 0;	//	set key 'id' value to 0
}
cart[id] = parseInt(cart[id]) + 1;	//	increase cart[id] by 1
res.cookie('cart', cart);	//	update cookie cart

④ Delete

예) delete req.session.displayName;


○ Cookie와 보안

Encrypt cookie

app.use(cookieParser('98@sk161fvi28#$u'));	//	cookieParser에 key값을 인자로 전달

var cart = req.signedCookies.cart;	//	cookies 객체 대신 signedCookie 객체를 사용

res.cookie('cart', cart, {signed:true});	//	update시 세 번째 인자로 {signed:true} pair 전달

★ id, password는 보안상 매우 중요한 정보이므로 어떤 경우에도 cookie에 저장하지 않는다.


◎ Session

: Cookie를 개선한 방식

Server는 client의 PC에 cookie를 저장하나 cookie의 내용으로 id만을 저장한다. 실제 사용자 data는 server에 저장하고 사용자의 id로 식별하여 사용한다.

자동 로그인의 경우 session을 이용하여 사용자가 명시적으로 log out하지 않은 경우 id가 맞는 사용자를 자동 로그인하는 처리를 할 수 있다.

$> npm install express-session --save

var session = require('express-session');

app.use(session({
	secret: '59s7xk22@&%xj2@st7',	//	key
	resave: false,	//	create new session id whenever user visits the site
	saveUninitialized: true		//	do not issue session id before user connection})
);

if(uname == user['username'] && pwd == user['password']){
	req.session.nickname = user['nickname'];	//	store user's nickname into session
	res.redirect('/welcome');
}

if(req.session.nickname){	//	check session data
	res.send(`
		<h1>Hello, ${req.session.nickname}</h1>
		<a href="/auth/logout">Logout</a>
	`);
}

※ session의 내용과 client - server가 주고 받은 cookie를 살펴보면 아래와 같다.

① session의 내용: 'nickname' key가 생성되어 있고 값이 저장되어 있다.
{"cookie":{"originalMaxAge":null,"expires":null,"httpOnly":true,"path":"/"},"nickname":"Balup zergling"}

② cookie의 내용: session id가 저장되어 있다.
Cookie: connect.sid=s%3AuOkZ10O2NQtSnnBhu0g7xMXMMXG3WP1I.9d23U2o09YTGyk148%2FywHOVEjfcdA8ohmOx6WrrhsCk

특정 조건(예, user name과 password가 모두 matching)이 만족되었을 때 session에 data를 저장하고(예, nickname) 저장한 data(예, nickname)의 유무로 동일 session인지 확인할 수 있다.

logout시에는 delete 명령을 이용하여(delete req.session.nickname) 특정 data를 삭제하여 구현한다.


○ session store

일반적으로 session은 server의 메모리에 저장된다. 하지만 실제 서비스 서버에는 파일이나 DB에 저장된다.

1. file에 저장

$> npm install session-file-store --save

var session = require('express-session');
var fileStore = require('session-file-store')(session);

app.use(session({
	secret: '59s7xk22@&%xj2@st7',
	resave: false,	//	create new session id whenever user visits the site
	saveUninitialized: true,	//	do not issue session id before user connection
	store: new fileStore()	//	option for store session data into file
})
);

위와 같이 설정하면 'sessions'라는 디렉토리가 생성되고 해당 디렉토리에 session정보가 파일로 저장된다.

2. MySQL DB에 저장

$> npm install express-mysql-session --save

var session = require('express-session');
var MySQLStore = require('express-mysql-session')(session);

app.use(session({
	secret: '59s7xk22@&%xj2@st7',
	resave: false,	//	create new session id whenever user visits the site
	saveUninitialized: true,	//	do not issue session id before user connection
	store: new MySQLStore({		//	setting for storing session data into MySQL DB
		host:'localhost',
		port:3306,
		user:'root',
		password:'your password',
		database:'your database'
	})
})
);

위와 같이 설정하면 DB안에 sessions라는 table이 생성되고 session data가 저장된다.

※ App이 DB와 연동하는 경우 DB의 save/restore delay때문에 App이 오동작 할 수 있다. 이를 방지하기 위해 DB에 data가 저장되는 것을 확인하고 다음 동작을 수행하는 것이 좋다.

예)
req.session.nickname = user['nickname'];	//	store user's nickname into session
req.session.save(function(){	//	redirect to '/welcome' after saving into DB
	res.redirect('/welcome');
});

3. orient DB를 session DB로 사용

$> npm install connect-oriento --save

var orientoStore = require('connect-oriento')(session);

app.use(session({
	secret: '59s7xk22@&%xj2@st7',
	resave: false,	//	create new session id whenever user visits the site
	saveUninitialized: true,	//	do not issue session id before user connection	store:	new orientoStore({	//	option for store session data into file
	server: 'host=localhost&port=2424&username=root&password="your password"&db="your DB"'
	})
})
);

※ 역시 App과 DB의 동작 간에 시차가 발생하여 App이 DB의 상태에 따라 정상적으로 동작하지 못할 수 있기 때문에 DB의 동작이 완료되는 것을 확인한 후 App의 동작을 수행하는 부분을 구현할 필요가 있다.

예)
req.session.save(function(){	//	redirect to '/welcome' after saving into DB
	res.redirect('/welcome');
});


◎ 비밀번호 관리

○ 비밀번호의 암호화

hashing을 통해 암호를 변형시켜 저장하면 hashing된 암호가 유출되더라도 원래 암호를 알 수 없다.

여기서는 md5를 사용하였다. 하지만 md5는 결함이 발견되었기 때문에 더 이상 암호화 목적으로 쓰지 않는다.

$> npm install md5 --save

user의 암호가 '111'이었다면 실제 DB에는 'md5(111)'을 저장하고, user가 접속 시 암호를 입력했을 때도 'md5(user password)'로 hashing된 암호값을 구하고 이를 DB에 저장되어 있는 암호와 비교한다.

예)
var pwd = md5(req.body.password);

if(uname == user['username'] && pwd == user['password']){
	req.session.nickname = user['nickname'];	//	store user's nickname into session
	req.session.save(function(){
		res.redirect('/welcome');
	});
}

하지만 암호가 간단한 경우 (다양한 값들을 입력해보면서) hashing을 cracking할 수 있는 경우가 생긴다.

이런 경우를 방지하기 위해서 'salt'라는 추가 변수를 사용한다.

예)
var salt = '29xwwic2@3&@s10sfacv';

var pwd = 'your password';

var check = md5(pwd + salt);

위와 같이 'salt' string을 추가하면 이 'salt'값이 상당히 복잡한 값이기 때문에 역으로 원래값(= 암호)을 추청하는 것이 매우 힘들게 된다.

○ SHA

md5는 더 이상 암호화를 위해 사용하지 않는다. 그 대신 여기서는 sha256을 사용한다.

$> npm install sha256 --save

예)
var sha256 = require('sha256');

if(uname == user['username'] && sha256(pwd + user['salt']) == user['password']){
	req.session.nickname = user['nickname'];	//	store user's nickname into session
	return req.session.save(function(){		//	return(exit from 'app.post') if a user matches
		res.redirect('/welcome');
	});
}

○ Key Stretching

단방향 암호화를 여러번 거치는 것

예) sha256(sha256(sha256(target data))

실수 등을 방지하지 위해 Key stretching에 필요한 번거로운 구현을 단순화하기 위한 방법을 사용하는 것이 좋다.

본 예제에서는 PBKDF2를 사용한다.

$> npm install pbkdf2-password --save

var bkfd2Password = require('pbkdf2-password');
var hasher = bkfd2Password();
var opts = {password: "helloworld"};

hasher(opts, function(err, pass, salt, hash){
	opts.salt = salt;	//	'salt' is created automatically
	console.log(err, pass, salt, hash);
});

위에서 구해진 'salt'값과 'hash'값을 사용자 DB의 'salt', 'password'값으로 설정한다.

아래는 nodejs server안에서의 구현이다.

var bkfd2Password = require('pbkdf2-password');
var hasher = bkfd2Password();

if(uname == user['username']){
	return hasher({password:pwd, salt:user['salt']}, function(err, pass, salt, hash){
		if(hash == user['password']){
			req.session.nickname = user.nickname;
			req.session.save(function(){
				res.redirect('/welcome');
			});
		}
		else{
			res.send('Incorrect user information. <a href="/auth/login">login</a>');
		}
	});
}

username이 matching되는 user의 password가 pbkdf2의 hash값과 같다면 welcome page('/welcome')로 redirection하고 함수를 끝내도록(return, 비동기 방식으로 동작하기 때문에 동작을 마친 후 함수를 exit) 하고 있다.

○ user의 추가

user로 부터 받은 username, password, nickname과 PBKDF2에서 생성된 hash, salt값으로 JSON 객체를 만든 뒤 이를 users array에 추가하는 방법으로 간단히 구현해 보았다.

var uname = req.body.username;

var passwd = req.body.password;
var nickname = req.body.nickname;
hasher({password:passwd}, function(err, pass, salt, hash){
	var user ={
		username:uname,
		password:hash,
		salt:salt,		//	'salt' is created automatically
		nickname:nickname
	};

	users.push(user);

	res.redirect('/welcome');
});


◎ Passport JS

인증(authentication)을 쉽게 구현할 수 있도록 도와주는 package

Federation authentication: 외부의 공신력있는 단체의 로그인 정보를 이용하여 특정 site의 로그인을 도와 주는 것
예) FB, Google을 통해 login

var passport = require('passport');
var localStrategy = require('passport-local').Strategy;

app.use(passport.initialize());
app.use(passport.session());	//	use 'session' method when using passport
※ passport session 설정 'app.use(passport.session());'은 session 기본 설정이 끝난 후에 설정하여야 한다.

- Strategy: 각각의 방법으로 로그인 하는 방법

① passport 모듈을 include한다

var passport = require('passport');


② local strategy를 include한다

var localStrategy = require('passport-local').Strategy;
※ local strategy를 사용하기 위해서는 NPM의 'passport-local' 모듈을 설치해야 한다.


③ local strategy를 구현한다

passport.use(new localStrategy(
	function(username, password, done){
		var uname = username;
		var pwd = password;
		var user;

		for(var i = 0; i < users.length; i++){
			user = users[i];

			if(uname == user['username']){
				return hasher({password:pwd, salt:user['salt']}, function(err, pass, salt, hash){
					if(hash == user['password']){
						console.log('localStrategy', user);
						done(null, user);	//	hand over user data to serializeUser function using done function
						//	cf.) done(err);		//	for error handling
					}
					else{
						done(null, false);
					}
				});
			}
		}

		done(null, false);		//	no matching user in the user list
	}
));

④ login 기능의 post 방식 데이터 처리 방법을 구현한다

//	execute 'local' strategy
//	'failureFlash': instant message that notifies login failure to a user
app.post('/auth/login', passport.authenticate('local', {
		successRedirect: '/welcome',
		failureRedirect: '/auth/login',
		failureFalsh: false
	})
);


⑤ passport의 serializer, deserializer를 구현한다

passport.serializeUser(function(user, done){
	console.log('serializeUser', user);
	done(null, user['username']);		//	store user name into a session
});

//	this function is called whenever user visits new pages
passport.deserializeUser(function(id, done){
	console.log('deserializeUser', id);
	for(var i = 0; i < users.length; i++){
		var user = users[i];
		if(user['username'] == id){
			//	done function creates or update req.user object, which include user specific data
			return done(null, user);
		}
	}
});

login 할 때 serializeUser함수가 실행되면서 session이 형성되고, 이후 page request가 있을 때 마다 deserializeUser함수가 실행되면서 cookie의 session id를 이용해서 user가 connect되어 있는지 확인하고 내부의 done(null, user)함수가 req 객체에 user객체를 생성(갱신)하고 이 객체(req.user)를 통해 각 page는 user의 접속 여부와 user data를 사용할 수 있다. 예를 들면 아래와 같다.

app.get('/welcome', function(req, res){
	// passport module creates 'user' object in the 'req' object after doing 'local' strategy
	// the req.user comes from 'done(null, user)' in the deserializeUser function
	if(req.user && req.user.nickname){
		console.log('/welcome - login success');
		res.send(`
			<h1>Hello, ${req.user.nickname}</h1>
			<a href="/auth/logout">Logout</a>
		`);
	}
	else{
		...
	}
});


⑥ logout

app.get('/auth/logout', function(req, res){
	req.logout();
	req.session.save(function(){
		res.redirect('/welcome');
	});
});

logout() 함수를 호출해서 seesion을 지우고, 이 과정을 마치면(.save) 첫 페이지(/welcome)로 돌아간다.


◎ Federation authentication - 타사 인증

본 예제에서는 FaceBook을 사용하였다.

① developers.facebook.com에 방문해서 앱을 만들고 설정한다. 연습용 site인 경우 URL에 'localhost:port#'로 입력하면 된다.

앱 생성 결과로 ID와 secret이 만들어지고, 기관 인증을 위해 이 두 식별자가 사용된다.


② passport strategy NPM을 설치한다.

$> npm install passport-facebook --save


③ facebook strategy router를 만든다

사용자가 '/auth/facebook' URL에 접근하면 'facebook' strategy를 실행한다.

//	execute 'facebook' strategy
app.get('/auth/facebook', passport.authenticate('facebook'));

추가적인 정보가 필요하면 'scope' property를 추가한다.
 
app.get('/auth/facebook', passport.authenticate('facebook', {scope: 'email'}));

scope에 명시된 value가 있으면 facebook strategy 구현 안에 facebook에서 가져올 field들을 명시해 주어야한다.

예) profileFields:['id', 'email', 'gender', 'link', 'locale', 'name', 'timezone', 'updated_time', 'verified', 'displayName']


④ facebook startegy를 구현한다

//	register passport strategy for passport
passport.use(new facebookStrategy({
	clientID: FACEBOOK_APP_ID,
	clientSecret: FACEBOOK_APP_SECRET,
	callbackURL: "http://www.example.com/auth/facebook/callback"
	},
	function(accessToken, refreshToken, profile, done){
		console.log(profile);
		var authId = 'facebook:' + profile['id'];
		for(var i = 0; i < users.length; i++){
			user = users[i];

			if(user.authId == authId){
				return done(null, user);
			}
		}
		var newuser = {
			'authId':authId,
			'nickname':profile['displayName']
		}
		users.push(newuser);
		done(null, newuser);
	}
})
);

facebook strategy는 몇 가지 정보를 담아서 facebook에 보낸다.
그리고 facebook이 호출하여 실행시킬 callback 함수를 등록한다. 이 callback 함수는 DB에 user data가 있는지 확인하고, 있다면 user data를 serializer로 보내고(done(null, user)), 없다면 DB에 새로 등록하고 새로 등록한 user data를 serializer로 보낸다(done(null, newuser)).


⑤ facebook callback URL을 설정하고 router를 구현한다.

//	FaceBook calls this url
app.get('/auth/facebook/callback', passport.authenticate(
	'facebook', {
		successRedirect: '/welcome',
		failureRedirect: '/auth/login'
	})
);

facebook callbackURL에는 facebook이 사용자 정보를 담아서 보낼 때 호출할 당신 웹 사이트의 주소를 적어주어야 한다.
facebook strategy가 활성화 되었을 때 facebook은 facebook strategy에 들어있는 callback 함수를 실행시키고 callbackURL을 호출한다.


⑥ session을 통해 user data를 관리할 serializer, deserializer 함수를 구현한다.

session에 user.['authId']를 기록한다.

passport.serializeUser(function(user, done){
	console.log('serializeUser', user);
	//done(null, user['username']);		//	store user name into a session
	done(null, user.['authId']);		//	store user name into a session
});

session에 기록되어 있는 id값(done(null, user.['authId'])이 DB에 있는 사용자의 것과 같다면 req객체에 user객체를 생성하거나, 이미 생성되어 있으면 update한다.

//	this function is called whenever user visits new pages
passport.deserializeUser(function(id, done){
	console.log('deserializeUser', id);
	for(var i = 0; i < users.length; i++){
		var user = users[i];
		//if(user['username'] == id){
		if(user['authId'] == id){
			//	done function creates or update req.user object, which include user specific data
			return done(null, user);
		}
	}
});


⑦ 사용자 인증의 결과인 successRedirect, failureRedirect target을 구현한다.

여기서는 아래의 target들을 대상으로 하였다.
{successRedirect: '/welcome', failureRedirect: '/auth/login'}

req객체에 user 객체가 만들어졌는지, 그리고 user객체 안에 nickname field가 있는지 확인하여 사용자가 로그인 상태인지 판단한다.

app.get('/welcome', function(req, res){
	// passport module creates 'user' object in the 'req' object after doing 'local' strategy
	// the req.user comes from 'done(null, user)' in the deserializeUser function
	if(req.user && req.user.nickname){
		console.log('/welcome - login success');
		res.send(`
			<h1>Hello, ${req.user.nickname}</h1>
			<a href="/auth/logout">Logout</a>
		`);
	}
	else{
		console.log('/welcome - login fails');
		res.send(`
			<h1>Welcome</h1>
			<p>
				<a href="/auth/login">Login</a>
			</p>
			<p>
				<a href="/auth/register">Register</a>
			</p>
		`);
	}
});

★ passport와 passport strategy를 통한 authentication과정을 요약하면 아래와 같다.

① app.get('/auth/facebook', passport.authenticate('facebook'));

② passport.use(new facebookStrategy({...})); facebook strategy 실행

③ facebook이 facebookStrategy의 callback 함수 실행

④ callback함수의 'done(null, user)' 함수 실행

⑤ passport.serializeUser 함수를 통해 session 형성

⑥ app.get('/auth/facebook/callback', passport.authenticate(...); 함수 내의 success/failure Redirect URL 접근

⑦ redirect URL을 통해 새로운 page에 접근하면서 passport.deserializeUser(...); 함수 실행

⑧ passport.deserializeUser(...); 함수의 done(null, user)함수가 실행되면서 req.user 객체 생성 or 갱신

⑨ 각 page들은 req.user 객체와 그 멤버들을 통해 session의 유지 여부 및 session data를 사용할 수 있다.



◎ Jade

Jade extends - 상속

Jade HTML document generator engine의 장점은 단순히 express와 맞물려 HTML을 동적으로 생성해 주는 것 만은 아니다. 상속(extends), 포함(indlude) 등의 기능을 이용해서 template document의 내용을 확장하거나 각 개별 document에 tamplate  document의 내용을 포함시켜서 각 개별 document를 확장 시킬 수 있다.

○ extends: template document의 내용을 확장시킨다

예)

- template.jade

html
	head
	body
		ul
			li JaveScript
			li nodejs
			li expressjs
		article 
			block content

- view.jade

extends ./layout
block content
	| JavaScript is ...


- add.jade

html
extends ./layout
block content
	form
		input(type="text")
		input(type="submit")


view.jade, add.jade가 template의 'block content'영역을 확장시키고 있다.


○ include: 각 개별 document에 tamplate  document의 내용을 포함시켜서 각 개별 document를 확장시킨다

- head.jade

head
	title My Site
	script(src='/javascripts/jquery.js')
	script(src='/javascripts/app.js')

- index.jade

doctype html
html
	include ./include/head.jade
	body
		h1 My Site
		p Welcome to my super lame site.

head.jade 파일을 이용하여 index.jade 파일을 확장시키고 있다.


◎ Create node.js module

프로젝트의 여러 파일들에서 공통적으로 사용하는 내용들을 모듈로 분리하여 관리할 수 있다.

① module file을 만들고 module interface를 구현한다.

module.exports.'function name' = function(args ...){
	function body
}

② module을 import하고 사용한다.

예)
var calc = require('./lib/calculator');

console.log('calc.sum', calc.sum(1, 2));

console.log('calc.avg', calc.avg(1, 2));


◎ Router separation using module concept

module의 한 가지 장점(이자 단점)은 파일로 분리된 object를 만들 수 있는 것이다. 이 개념을 잘 이용하면 여러 개의 파일들을 이용하여 프로젝트 관리의 용이성을 높일 수 있다.

예를 들어 아래와 같은 routing path를 갖는 web page가 있다고 하자.

/p1/r1
/p1/r2

/p2/r1
/p2/r2

이전 예제 까지는 모든 routing path를 하나의 파일 안에 기록했었다. 하지만 각각의 routing path가 독립되어 있고 서로 관계가 없다면 이들을 module화 하여 별도의 파일로 분리하여 관리하는것이 편리하다.

예)

- app_route.js

var express = require('express');
var app = express();

var p1 = require('./p1')(express);
var p2 = require('./p2')(express);

app.use('/p1', p1);
app.use('/p2', p2);

app.listen(3008, function(){
	console.log('connected to 3008 port.');
});

- p1.js

module.exports = function(express){
	var p1 = express.Router();
	p1.get('/r1', function(req, res){
		res.send('Hello, /p1/r1');
	});
	p1.get('/r2', function(req, res){
		res.send('Hello, /p1/r2');
	});

	return p1;
}


◎ CRUD and Auth - more secure and personalized app 

※ 예제 code의 복잡도를 낮추기 위해서 db, express, passport setup, 그리고 router 구현을 module화 방법을 사용하여 별도의 파일로 분리하였다(31_Authenticated_CRUD).

